// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaEgoCarlaMultirotorControl.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaMultirotorControl.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define carla_msgs_msg_CarlaMultirotorControl_max_cdr_typesize 289ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;
#define carla_msgs_msg_CarlaMultirotorControl_max_key_cdr_typesize 0ULL;

carla_msgs::msg::CarlaMultirotorControl::CarlaMultirotorControl()
{
    // std_msgs::msg::Header m_header

    std::vector<float> m_throttle;

}

carla_msgs::msg::CarlaMultirotorControl::~CarlaMultirotorControl()
{
}

carla_msgs::msg::CarlaMultirotorControl::CarlaMultirotorControl(
        const CarlaMultirotorControl& x)
{
    m_header = x.m_header;
    m_throttle = x.m_throttle;
}

carla_msgs::msg::CarlaMultirotorControl::CarlaMultirotorControl(
        CarlaMultirotorControl&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_throttle = x.m_throttle;
}

carla_msgs::msg::CarlaMultirotorControl& carla_msgs::msg::CarlaMultirotorControl::operator =(
        const CarlaMultirotorControl& x)
{
    m_header = x.m_header;
    m_throttle = x.m_throttle;

    return *this;
}

carla_msgs::msg::CarlaMultirotorControl& carla_msgs::msg::CarlaMultirotorControl::operator =(
        CarlaMultirotorControl&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_throttle = x.m_throttle;

    return *this;
}

bool carla_msgs::msg::CarlaMultirotorControl::operator ==(
        const CarlaMultirotorControl& x) const
{
    return (m_header == x.m_header && m_throttle == x.m_throttle);
}

bool carla_msgs::msg::CarlaMultirotorControl::operator !=(
        const CarlaMultirotorControl& x) const
{
    return !(*this == x);
}

size_t carla_msgs::msg::CarlaMultirotorControl::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaMultirotorControl_max_cdr_typesize;
}

size_t carla_msgs::msg::CarlaMultirotorControl::getCdrSerializedSize(
        const carla_msgs::msg::CarlaMultirotorControl& data,
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    return current_alignment - initial_alignment;
}

void carla_msgs::msg::CarlaMultirotorControl::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_header;
    scdr << m_throttle;
}

void carla_msgs::msg::CarlaMultirotorControl::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_header;
    dcdr >> m_throttle;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void carla_msgs::msg::CarlaMultirotorControl::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void carla_msgs::msg::CarlaMultirotorControl::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaMultirotorControl::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaMultirotorControl::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member throttle
 * @param _throttle New value for member throttle
 */
void carla_msgs::msg::CarlaMultirotorControl::throttle(
        std::vector<float> _throttle)
{
    m_throttle = _throttle;
}

/*!
 * @brief This function returns the value of member throttle
 * @return Value of member throttle
 */
std::vector<float> carla_msgs::msg::CarlaMultirotorControl::throttle() const
{
    return m_throttle;
}

/*!
 * @brief This function returns a reference to member throttle
 * @return Reference to member throttle
 */
std::vector<float>& carla_msgs::msg::CarlaMultirotorControl::throttle()
{
    return m_throttle;
}

size_t carla_msgs::msg::CarlaMultirotorControl::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaMultirotorControl_max_key_cdr_typesize;
}

bool carla_msgs::msg::CarlaMultirotorControl::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaMultirotorControl::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
